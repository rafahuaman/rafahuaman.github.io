<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.6.2">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2018-03-09T12:01:16-05:00</updated><id>http://localhost:4000/</id><title type="html">Code &amp;amp; Kaizen</title><subtitle>Rafael Huaman's personal site</subtitle><entry><title type="html">API Craft Chicago - Reboot</title><link href="http://localhost:4000/api-craft-chicago-reboot" rel="alternate" type="text/html" title="API Craft Chicago - Reboot" /><published>2014-11-18T04:10:00-05:00</published><updated>2014-11-18T04:10:00-05:00</updated><id>http://localhost:4000/api-craft-chicago-reboot</id><content type="html" xml:base="http://localhost:4000/api-craft-chicago-reboot">&lt;p&gt;Today the rebooted “API Craft Chicago” meetup held its first meeting. It was a great evening in which organizer Stephen Rylander invited a few people to share some ‘war’ stories related to API development.&lt;/p&gt;

&lt;p&gt;Stephen opened the night with a presentation on why he was rebooting the meetup and why he thought having discussions around APIs is important. One of his points was that we need to have discussions in order to share experience and not repeat the “mistakes” from the past. I also took from his talk that REST is here now and “REST is the Internet” but things could change like they have done in the past and we need to be ready for it.&lt;/p&gt;

&lt;p&gt;We heard about the “sprint of death” from the Datalogics team. It was a scary API development story with a happy ending.&lt;/p&gt;

&lt;p&gt;One of my favorite moments of the night was from another war story. The sentiment can be paraphrased in the following way:&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;“If you tailor your API for them (your client), then they &lt;strong&gt;will be&lt;/strong&gt; your only users”.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This was a lesson the presenter learned when his team agreed to excessive clients demands for the API specification they were building. Thanks for the wisdom!&lt;/p&gt;

&lt;p&gt;A couple of final thoughts:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Performance is key&lt;/strong&gt; in this distributed world. Start developing your APIs with performance in mind.&lt;/li&gt;
  &lt;li&gt;Standards are good. Often a product depends on multiple APIs from different teams . A little agreement goes a long way.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Thank you to the folks at Morningstar for the space and to the organizers for their time and effort!&lt;/p&gt;

&lt;p&gt;I look forward to the next one.&lt;/p&gt;</content><author><name>Rafael Huaman</name></author><category term="Programming" /><summary type="html">Today the rebooted “API Craft Chicago” meetup held its first meeting. It was a great evening in which organizer Stephen Rylander invited a few people to share some ‘war’ stories related to API development.</summary></entry><entry><title type="html">My App: ‘Debater’</title><link href="http://localhost:4000/my-app-debater" rel="alternate" type="text/html" title="My App: 'Debater'" /><published>2014-11-06T03:05:00-05:00</published><updated>2014-11-06T03:05:00-05:00</updated><id>http://localhost:4000/my-app-debater</id><content type="html" xml:base="http://localhost:4000/my-app-debater">&lt;p&gt;After a few months of work, I have finally completed my first practice app. I built it little by little in the mornings before work and on the weekends as well.&lt;/p&gt;

&lt;p&gt;With this app I wanted to demonstrate to myself what I had learned about Ruby and Rails. At the same time I was looking to build something slightly different that I had not seen before. I took this approach to keep me motivated. I didn’t want to write just another to-do app or blogging app. developing something new kept me going.&lt;/p&gt;

&lt;p&gt;Another decision I made about building this app is that I wanted to keep it simple with relatively few features. The reason for this is that I didn’t want to get distracted by frivolous features that would have made this project go on forever. I believe I accomplshied the vision I had at the beginning.&lt;/p&gt;

&lt;p&gt;I ended up building a debating forum. It looks a lot a lot like a forum except for the emphasis on a two sided discussion which is reinforced by the layout of the comments. Additionally, I included some features in order to emulate the experience of a debate. I implemented what I thought adding to an argument, correcting someone, and making counterarguments could look like on the web.&lt;/p&gt;

&lt;p&gt;In the end I have a working app with most of the components built from scratch. I didn’t want to depend on gems for this project since another one of my goals was to get more familiar with the Rails framework by building everything that I needed.&lt;/p&gt;

&lt;h3 id=&quot;retrospective&quot;&gt;Retrospective&lt;/h3&gt;

&lt;h4 id=&quot;things-that-worked&quot;&gt;Things that worked&lt;/h4&gt;

&lt;p&gt;Working on the app a little everyday was definitely very helpful. I had a lot going on with work at the time so dividing my tasks on very small chunks every day made me feel that I was making progress all the time. I will definitely attempt to keep this approach in future projects.&lt;/p&gt;

&lt;p&gt;Saving the weekends for potentially time-consuming or research oriented tasks made a big difference. The weekends provided the time I needed to fully immerse myself on some problems. I would usually save this time for the features that I knew were going to be more difficult. I would also use this time to solve any problems that I had during the week. I would focus on small victories every day knowing I had the weekend to resolve my bigger issues. If I got stuck on something, I would stop; make a note to do look at it on the weekend, and move on to the next task.&lt;/p&gt;

&lt;h4 id=&quot;things-that-i-should-avoid-next-time&quot;&gt;Things that I should avoid next time&lt;/h4&gt;

&lt;p&gt;I lost some steam towards the end. I wanted to be done and rushed a few features. The voting component comes to mind. I think that a big part of this was due to the fact I always considered this a “practice” app. It served its purpose and I was ready to move on.&lt;/p&gt;

&lt;p&gt;I left some parts of the front-end unpolished; that made me feel that I shouldn’t spend more time on it. If I had spent a bit more time on making my app look better, I would have probably been more excited about continuing to work on it instead of moving on. I could have made the app look better when I noticed I disliked something; however, front-end design wasn’t one of the main goals of this project. So in the spirit of staying true to my goals, I only did what was visually “good enough”.&lt;/p&gt;

&lt;p&gt;Next time I will definitely focus a bit more on the front-end and try to always fix anything that I think is lacking.&lt;/p&gt;

&lt;p&gt;So that is it. It was a pretty nice exercise. I am proud of this little app. It helped me a lot but I am already working on a different project. I am planning to spend more time polishing my next app so that I can actually release it to the world.&lt;/p&gt;</content><author><name>Rafael Huaman</name></author><category term="Programming" /><summary type="html">After a few months of work, I have finally completed my first practice app. I built it little by little in the mornings before work and on the weekends as well.</summary></entry><entry><title type="html">Applying what I learned to my job</title><link href="http://localhost:4000/applying-what-i-learned-to-my-job" rel="alternate" type="text/html" title="Applying what I learned to my job" /><published>2014-05-13T23:00:00-04:00</published><updated>2014-05-13T23:00:00-04:00</updated><id>http://localhost:4000/applying-what-i-learned-to-my-job</id><content type="html" xml:base="http://localhost:4000/applying-what-i-learned-to-my-job">&lt;p&gt;I am writing this post because I want to document what I consider one of my biggest victories in this learning journey of mine. Additionally, I want to share how learning something new can impact your job even if they are seemingly unrelated. In this post I will briefly explain how I built a custom &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;ORM&lt;/a&gt; solution for &lt;a href=&quot;http://www.teradata.com/?LangType=1033&quot;&gt;Teradata&lt;/a&gt; in VB.Net.&lt;/p&gt;

&lt;h3 id=&quot;legacy-and-when-non-coders-code&quot;&gt;Legacy and when non-coders code&lt;/h3&gt;

&lt;p&gt;Recently I was a given control of a project at work. This project was a simple automation tool which read and wrote to a database and accepted user input through a GUI. Pretty standard stuff. It was been written by business analysts who knew how to code a little but had no further interest in software development. The lack of good technical direction allowed for a few bad practices. As a result, some of the things that &lt;em&gt;got the job done&lt;/em&gt; in beginning did not seem acceptable going forward.&lt;/p&gt;

&lt;p&gt;One of the areas in which the tool was noticeably weak was communication with the database. Back when there was only one use-case, the developers did not think it was a big deal to duplicate code when connecting to the DB. After all they were only doing this a handful of times.  This means that for each database interaction the developer was defining a connection string, opening the database connection, defining a query, executing it, iterating through the resulting set, and closing the connection. This is a lot of code for just one query.&lt;/p&gt;

&lt;h3 id=&quot;rails-and-research&quot;&gt;Rails and Research&lt;/h3&gt;

&lt;p&gt;Not too long ago I finished working through two rails tutorials and started working on my own application (more on that later). Since them I have become very familiar with rails.  Rails introduced me to the concept of &lt;a href=&quot;http://en.wikipedia.org/wiki/Object-relational_mapping&quot;&gt;Object Relational Mapping&lt;/a&gt;. As I became better at Rails and learned more about &lt;a href=&quot;http://guides.rubyonrails.org/active_record_basics.html&quot;&gt;Active Record&lt;/a&gt; (Rails ORM solution) I appreciated it more.&lt;/p&gt;

&lt;p&gt;Armed with my recent knowledge about ORM frameworks I started to research open-source solutions that would work with the database we were using. Teradata is not an open source and it is relatively new; consequently there is not a lot of free stuff out there that supports it. After a couple of hours I came up empty handed.&lt;/p&gt;

&lt;p&gt;This is when I decided I was going to build my own ORM framework. It seemed daunting at first, but  I was going to abstract a lot of the connection code anyway in order to make the code &lt;a href=&quot;http://en.wikipedia.org/wiki/Don't_repeat_yourself&quot;&gt;DRY&lt;/a&gt;. After that abstraction, it seemed that I was only a few steps away from having an ORM. SO I decided to give it shot.&lt;/p&gt;

&lt;h3 id=&quot;my-first-orm&quot;&gt;My first ORM&lt;/h3&gt;

&lt;p&gt;So here’s what I did.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;First I put all of the connection handling logic in one class. So this class would be in charge of opening and closing connections.&lt;/li&gt;
  &lt;li&gt;Then I built a couple of Agent classes to handle queries and non-queries. They would send the queries to the connections, loop through the results; and return them in a standard format.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;These two things combined pretty much solved my initial problem. Instead of writing out all that connection code I mentioned at first I could write QueryAgent.execute(“SELECT * FROM Users”) and get a standard Datatable object as a result. All the connection opening and closing would be handled automatically. The hassle of connecting to the databse became a one-liner. This was good start.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The next thing I did was to start working on an Active Record class. At the same time I worked on a queryBuilder class.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;I based my active records class on my knowledge of Rails. This class handled all the generic &lt;a href=&quot;http://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt; functionality for all my models and would make a lot of use of my query and non-query agent classes. Essensiattly the AR class provided an API which turned CRUD actions into SQL statements. For example, &lt;em&gt;create&lt;/em&gt; would become QueryAgent.execute(“Insert into ….”).&lt;/p&gt;

&lt;p&gt;My AR class used the queryBuilder class to build all the custom queries it needed in order to be able to support several many tables with different schemas. The QueryBuilder class would differentiate between models using some key variables and build the appropriate queries. In other words it was the QueryBuilder’s job to produce “INSERT INTO Users…” and “INSERT INTO Products…” correctly.&lt;/p&gt;

&lt;h3 id=&quot;done-and-done&quot;&gt;Done and done!&lt;/h3&gt;

&lt;p&gt;So that’s the quick explanation. It took a few days to put all of this together. As an added bonus I built this using TDD so all the functionality of my Active Record class was tested and gave me a lot of confidence in the solution I was implemented.&lt;/p&gt;

&lt;p&gt;I was very proud of this. Building my own ORM solution made me feel more like a real hacker, gave me a lot of confidence in my own abilities, and validated the time and effort I spend learning and practicing outside of work.&lt;/p&gt;</content><author><name>Rafael Huaman</name></author><category term="Programming" /><summary type="html">I am writing this post because I want to document what I consider one of my biggest victories in this learning journey of mine. Additionally, I want to share how learning something new can impact your job even if they are seemingly unrelated. In this post I will briefly explain how I built a custom ORM solution for Teradata in VB.Net.</summary></entry><entry><title type="html">Working through two Rails tutorials</title><link href="http://localhost:4000/working-through-two-rails-tutorials" rel="alternate" type="text/html" title="Working through two Rails tutorials" /><published>2014-03-01T22:16:00-05:00</published><updated>2014-03-01T22:16:00-05:00</updated><id>http://localhost:4000/working-through-two-rails-tutorials</id><content type="html" xml:base="http://localhost:4000/working-through-two-rails-tutorials">&lt;h3 id=&quot;after-the-first-one&quot;&gt;After the first one&lt;/h3&gt;

&lt;p&gt;A few months ago I completed the Hartl’s rails tutorial. I bragged a little about it on this post right &lt;a href=&quot;blog/2013/12/24/hartls-rails-tutorial-im-done/&quot;&gt;here&lt;/a&gt;.  I felt really good about it; however, I noticed that once I was done with the book I could hardly remember many of the details I had learned at the beginning. I realized that I had a better intuition about how it all went together and was very familiar with the Rails environment but I still had look up a lot of things and go back in the book to remember how to do specific things. All things considered, I couldn’t expect more; I was starting out and that had been my first venture with Rails. I considered it successful.&lt;/p&gt;

&lt;p&gt;One of the things that made it a succes for me was that the project demystified Rails for me. After I was done, Rails (and full stack web development) didn’t seem as scary and on the way I picked up new technologies and techniques. Even though I wasn’t a Rails guru, I was pretty confident I could get many things done as long as I looked them up.&lt;/p&gt;

&lt;h3 id=&quot;now-what&quot;&gt;Now what?&lt;/h3&gt;

&lt;p&gt;Long before I had finished the Hartl tutorial I had already decided I was going to work on a &lt;a href=&quot;http://pragprog.com/book/rails4/agile-web-development-with-rails-4&quot;&gt;second book&lt;/a&gt; in pretty much the same way. I wanted the second tutorial to offer a different perspective and at the same time reinforce the things I had learned with the first book. I have to say this worked very well. Not only did working through a second book accomplished what I was looking for but it also showed me my strong and weak areas. Basically if while reading the second book I found myself nodding and thinking &lt;em&gt;“Yes, this makes sense”&lt;/em&gt;, then I had a good grasp on the concept; on the other hand, if I read something and with a blank stare, thinking &lt;em&gt;“I have never heard of this before”&lt;/em&gt;, then it was something to which I needed to pay extra attention.&lt;/p&gt;

&lt;h3 id=&quot;comparing-the-tutorials&quot;&gt;Comparing the tutorials&lt;/h3&gt;

&lt;p&gt;With that little introduction out of the way I will proceed to comment on the differences that jumped out at me.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Disclaimer&lt;/em&gt;: I have to add the disclaimer that I only worked through part 1 and 2 of the “Agile Web Development with Rails 4” (AWDWR4) these sections essentially walk you through building a sample application like the Hartl tutorial; part 3 of the book covers additional Rails topics more in-depth does not included &lt;em&gt;code-along&lt;/em&gt; exercises.&lt;/p&gt;

&lt;h4 id=&quot;testing&quot;&gt;Testing&lt;/h4&gt;

&lt;p&gt;One of the main differences I noticed was that the Hartl tutorial is more focused on testing than AWDWR4. Hartl’s &lt;a href=&quot;http://en.wikipedia.org/wiki/Test-driven_development&quot;&gt;red-green-refactor cycle&lt;/a&gt; is present throughout the book and he spends a more time on using tools that help with testing. Hartl works with Rspec and FactoryGirl as opposed to AWDWR4 which uses the Rails out-of-the-box test solution as well as Fixtures to accomplish the same things. AWDWR4 does not test everything and only tests a few big changes and walks the user through one test user story.&lt;/p&gt;

&lt;p&gt;I think Hartl’s book does a better job with testing especially since beginners should be exposed to good practices when discovering Rails.&lt;/p&gt;

&lt;h4 id=&quot;css-magic&quot;&gt;CSS magic&lt;/h4&gt;
&lt;p&gt;Hartl’s tutorial uses &lt;a href=&quot;http://getbootstrap.com/&quot;&gt;Bootstrap&lt;/a&gt; whereas AWDWR4 does not. The simple introduction of Bootstrap makes Hartl’s tutorial project look better than the AWDWR4 counterpart. AWDWR4 does not focus on looks and it shows; the final project ends up looking like a website from the 90s.  However, in order to get Hartl’s project to look nice one has to copy and paste a lot of CSS styling. This felt like cheating. On this regard AWDWR4 feels more honest. AWDWR4 does not fool you into thinking that you will be able to create good-looking websites; that’s a different topic completely. However, Hartl introduces his readers to front-end frameworks. This might be enough to let his readers know that such tools exist and are freely available.&lt;/p&gt;

&lt;h4 id=&quot;scaffolding&quot;&gt;Scaffolding&lt;/h4&gt;

&lt;p&gt;For those who don’t know, &lt;a href=&quot;http://guides.rubyonrails.org/v3.2.13/getting_started.html#getting-up-and-running-quickly-with-scaffolding&quot;&gt;scaffolding&lt;/a&gt; is the Rails feature that automates the creation of a lot of necessary files to enable &lt;a href=&quot;http://en.wikipedia.org/wiki/Create,_read,_update_and_delete&quot;&gt;CRUD&lt;/a&gt; acctions for your data models. Think about it as a button that says “create engine” when building a car, once you press it a working engine appears in front of you ready to be customized for your needs.&lt;/p&gt;

&lt;p&gt;Hartl explains his approach early on in the book. In the demo chapter he shows the users how quickly he can build something by using rails scaffolding. After this he proceeds to build everything manually for the rest of his book. Hartl explains that this automation, although powerful and useful, is not conducive to teaching because the automation ends up doing a lot of things for you that rails developers need to learn in order to work effectively with the framework.&lt;/p&gt;

&lt;p&gt;AWDWR4 uses scaffolding right from the beginning. I agree with Hartl here. If Hartl’s tutorial had not explained everything that was going on under the hood before trying AWDWR4, I would have been really lost.&lt;/p&gt;

&lt;h4 id=&quot;sending-mail-and-internationalization&quot;&gt;Sending Mail and Internationalization&lt;/h4&gt;
&lt;p&gt;AWDWR4 spends the additional time it gains by not focusing on testing and by using scaffolding on exploring additional features. AWDWR4 will walk you through send mail and internationalization. These were neat topics that will come in handy later.&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;After doing this myself, my advice to all Rails beginners out there would be to take the time to work through two different Rails tutorials. This exercise showed me that there are different ways of working with Rails and several ways to reach the same goal. This is extremely valuable for someone (me) who is starting out and may mistakenly believe that the Hartl way is the only correct way of writing Rails application.&lt;/p&gt;

&lt;p&gt;I met someone at a meetup who recommended working through the Rails tutorial twice. I believe this would is helpful too since many of the chapters that were nebulous when first starting will be suddenly clear and make more sense on the second go. Nevertheless, I feel that working through the same book twice without exposure to other methods may delay the realization that there multiple ways of working with Rails.&lt;/p&gt;</content><author><name>Rafael Huaman</name></author><category term="Programming" /><summary type="html">After the first one</summary></entry><entry><title type="html">Lessons in Ruby from Exercism.io</title><link href="http://localhost:4000/lessons-in-ruby-from-exercism-dot-io" rel="alternate" type="text/html" title="Lessons in Ruby from Exercism.io" /><published>2014-02-05T23:44:00-05:00</published><updated>2014-02-05T23:44:00-05:00</updated><id>http://localhost:4000/lessons-in-ruby-from-exercism-dot-io</id><content type="html" xml:base="http://localhost:4000/lessons-in-ruby-from-exercism-dot-io">&lt;p&gt;##Exercism.io and Patience
When I started my path of personal development I gathered a lot of information on online resources to improve my skills as a programmer. That’s when I first learned about &lt;a href=&quot;http://exercism.io/&quot;&gt;Exercism.io.&lt;/a&gt; It seemed like a popular and useful resource which would introduce feedback to my learning. I bookmarked and archived it; however, I didn’t use it right away. I got more involved with the &lt;a href=&quot;http://ruby.railstutorial.org/&quot;&gt;Hartl Tutorial&lt;/a&gt;, the &lt;a href=&quot;http://pragprog.com/book/rails4/agile-web-development-with-rails-4&quot;&gt;Agile Web Development with Rails 4&lt;/a&gt; book, and a few more &lt;a href=&quot;http://www.amazon.com/Design-Patterns-Ruby-Russ-Olsen/dp/0321490452&quot;&gt;books&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;My interested got picked again at the &lt;a href=&quot;http://nickelcityruby.com/&quot;&gt;Nickel City Ruby&lt;/a&gt; conference where I heard a few people raving about how great Exercism.io was. At first nothing interesting happened, I finished the first exercise and was ready to move on. After a couple of days of not getting any feedback simply advanced to the next exercise. This is how my first two exercises went: “finish, wait, no response? Move on”. At this point I was wondering what made Exercism.io so special (whatever it was I was not seeing it).&lt;/p&gt;

&lt;p&gt;I finished the third exercise and forgot about it. A week had passed by the time I remembered I should check on my submission. I logged in and lo and behold… I had one feedback comment! It was a suggestion from a kind stranger on how my code could be improved. This suggestion was so good I was immediately excited. It did make my code better. I finally got it! You should Exercism.io a little time until someone gets around to checking your code.&lt;/p&gt;

&lt;p&gt;The following exercises went much better. I waited patiently for some feedback which would eventually arrive and improve my code and teach me more about the Ruby language.&lt;/p&gt;

&lt;p&gt;##My Lessons
###Adding Elements to a Hash of Arrays
In one of the problems I had to implement a class that could classify students based on their grades. The straight forward solution: a hash where the grade is the key and an array of students is the value. Here’s the catch: when looking for the students in a grade with no students assigned I should return and empty array &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; instead of &lt;code class=&quot;highlighter-rouge&quot;&gt;null&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Here’s my approach:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;School&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:db&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;empty?&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;I believe this covered the requirements. &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash.new([])&lt;/code&gt; returns a new, empty hash; if this hash is subsequently accessed by a key that doesn’t correspond to a hash entry, the single object &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt; will be used for all default values. So if &lt;code class=&quot;highlighter-rouge&quot;&gt;@db&lt;/code&gt; is empty, then &lt;code class=&quot;highlighter-rouge&quot;&gt;@db[wibble]&lt;/code&gt; will return &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;. Looking good!&lt;/p&gt;

&lt;p&gt;My biggest problem with my implementation was the add method. Even though it is written in one line (only because I am using ternary notation), it is not very readable. I wrote it that way because simply writing &lt;code class=&quot;highlighter-rouge&quot;&gt;@db[grade] &amp;lt;&amp;lt; name&lt;/code&gt; did not work. Somebody suggested I use &lt;code class=&quot;highlighter-rouge&quot;&gt;@db[grade] += [name]&lt;/code&gt;, but I didn’t think it would work (more on this later). Why would that work when &lt;code class=&quot;highlighter-rouge&quot;&gt;@db[grade] &amp;lt;&amp;lt; name&lt;/code&gt; did not?&lt;/p&gt;

&lt;p&gt;Turns out using &lt;code class=&quot;highlighter-rouge&quot;&gt;@db[grade] += [name]&lt;/code&gt; was definitely the way to go. I ran a few of tests and discovered why &lt;code class=&quot;highlighter-rouge&quot;&gt;@db[grade] &amp;lt;&amp;lt; [name]&lt;/code&gt; was not working. I believe &lt;code class=&quot;highlighter-rouge&quot;&gt;@db[grade] += [name]&lt;/code&gt; works as &lt;code class=&quot;highlighter-rouge&quot;&gt;@db[grade] = @db[grade] + [name]&lt;/code&gt;. Since I had defined the default value of the &lt;code class=&quot;highlighter-rouge&quot;&gt;@db&lt;/code&gt; hash to be &lt;code class=&quot;highlighter-rouge&quot;&gt;[]&lt;/code&gt;, that expression gets interpreted as &lt;code class=&quot;highlighter-rouge&quot;&gt;@db[grade] = [] + [name]&lt;/code&gt; which successfully performs the desired concatenation. This is pretty neat. I hadn’t thought of this approach when I first coded this. I opted for the conditional because when I tried doing concatenation with &lt;code class=&quot;highlighter-rouge&quot;&gt;@db[grade] &amp;lt;&amp;lt; [name]&lt;/code&gt; I ran into an interesting problem.&lt;/p&gt;

&lt;p&gt;The interesting part was finding out why &lt;code class=&quot;highlighter-rouge&quot;&gt;@db[grade] &amp;lt;&amp;lt; [name]&lt;/code&gt; was not working. This expression is essentially &lt;code class=&quot;highlighter-rouge&quot;&gt;@db[grade].push([name])&lt;/code&gt;. This statement directly modifies the default value for the hash whenever &lt;code class=&quot;highlighter-rouge&quot;&gt;@db[grade]&lt;/code&gt; has not been assigned a value. This was great find! It showed me difference between &lt;code class=&quot;highlighter-rouge&quot;&gt;+=&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;&amp;lt;&lt;/code&gt; as well how default values for a hash work.&lt;/p&gt;

&lt;p&gt;My code looked like this in the end:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;School&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;attr_reader&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:db&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initialize&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([])&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;###The Powerful Ruby Library
The second problem I had with my code was the sort method for the same exercise. The sort method was supposed to return a hash with the grades and the names of the students in the grade sorted. I had implemented this method in the following way:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sorted&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
  &lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;keys&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;each&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sorted&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;sorted&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This worked but it didn’t seem right to me. Ruby is a very powerful language and I have seen pretty clever of ways of solving problems like this one. My solution seemed like a clunky way of doing things. Luckily someone suggested a different approach. This is the final version of the method. One line! Yey!&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;
   &lt;span class=&quot;no&quot;&gt;Hash&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;vi&quot;&gt;@db&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;map&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;grade&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Let’s break it down.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Hash#sort&lt;/code&gt; is a useful method which returns a hash table sorted by its keys.&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#map&lt;/code&gt; is a method that returns a new array with the results of running a block once for every element in the enumerable. In this case I am passing my sorted hash table and getting back an array in which each element looks like this &lt;code class=&quot;highlighter-rouge&quot;&gt;[grade, [name1, name2, ..., nameN]]&lt;/code&gt;. Each element is an Array of length = 2 where the first element is the grade and the second element is a sorted array of student names.&lt;/li&gt;
  &lt;li&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;Hash[]&lt;/code&gt; method returns a hash. In one of its many forms, this method accepts an array of pairs as an argument (i.e. &lt;code class=&quot;highlighter-rouge&quot;&gt;[[key1,value1], [key2, value2],...,[keyN, valueN]]&lt;/code&gt;) and creates a hash table.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Combining all this methods makes it possible to get the full functionality of the sort method implemented in one very readable line.&lt;/p&gt;

&lt;h3 id=&quot;enumerable-to-the-rescue&quot;&gt;Enumerable to the rescue&lt;/h3&gt;
&lt;p&gt;I learned my third lesson in a different exercise. This exercise was very straightforward. Given two strings count the differences between them at every position. For example, CAT and CAP have a difference of 1. One condition of the problem was to stop the counting at the end of the shorter string. For instance, CATS and CAP have a difference of 1.  Simple enough. This was first attempt.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;  
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hamming&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hamming_diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; 
      &lt;span class=&quot;n&quot;&gt;hamming_diff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;hamming_diff&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;This was effective. However, I was able to improve it by using the special features of the Enumerable class pointed out by another user. In Ruby, most methods that take block return an Enumerable if no block is given. Additionally, one can apply the &lt;code class=&quot;highlighter-rouge&quot;&gt;Enumerable#count&lt;/code&gt; method which takes a block as a parameter to determine when to count an item.  Following these insights my final implementation looked like this.&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt; 
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Hamming&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;compute&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;max_length_to_compare&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;min&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;max_length_to_compare&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nf&quot;&gt;count&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;base&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;test&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt; 
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;The compute method could have been expressed in one line; however, this way the method separates the two main “ideas” in the code: finding the maximum length for the comparison and the counting loop. I believe that separating the ideas makes it into a very readable implementation.&lt;/p&gt;

&lt;p&gt;##Conclusion&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;http://exercism.io/&quot;&gt;Exercism.io&lt;/a&gt; is not meant for you to plough through all the exercises. It is meant for careful review, collaboration, and revision so that you can learn how to write the best code possible. The users in the site will be helpful but you just have to be a little patient and wait for their input.&lt;/p&gt;</content><author><name>Rafael Huaman</name></author><category term="Programming" /><summary type="html">##Exercism.io and Patience When I started my path of personal development I gathered a lot of information on online resources to improve my skills as a programmer. That’s when I first learned about Exercism.io. It seemed like a popular and useful resource which would introduce feedback to my learning. I bookmarked and archived it; however, I didn’t use it right away. I got more involved with the Hartl Tutorial, the Agile Web Development with Rails 4 book, and a few more books.</summary></entry><entry><title type="html">Hartl’s Rails Tutorial - I’m Done!</title><link href="http://localhost:4000/hartls-rails-tutorial-im-done" rel="alternate" type="text/html" title="Hartl's Rails Tutorial - I'm Done!" /><published>2013-12-24T06:02:00-05:00</published><updated>2013-12-24T06:02:00-05:00</updated><id>http://localhost:4000/hartls-rails-tutorial-im-done</id><content type="html" xml:base="http://localhost:4000/hartls-rails-tutorial-im-done">&lt;p&gt;So after a few months of coding on the weekend and late at night, I am finally done with the Hartl Rails tutorial. It was a great experience and I feel great about doing pretty much everything on the book. There was a lot to cover and I am not going to review it (there are plenty of reviews out there), but I am going to write about my biggest takeaways.&lt;/p&gt;

&lt;h2 id=&quot;the-ruby-koans&quot;&gt;The Ruby Koans&lt;/h2&gt;
&lt;p&gt;This little jewel was hidden in the exercise section of chapter 4. This resource was excellent and should have been more prominent. Someone who skipped the ruby section exercises could miss this great resource.&lt;/p&gt;

&lt;h2 id=&quot;rails-covers-everything&quot;&gt;Rails covers everything&lt;/h2&gt;
&lt;p&gt;Rails makes it possible for one person to do lots very fast. It is great, but sometimes it feels like “magic”. In order to really understand the magic you have to really understand rails (this is hard, there is a lot there).&lt;/p&gt;

&lt;h2 id=&quot;activerecord-is-important&quot;&gt;ActiveRecord is important&lt;/h2&gt;
&lt;p&gt;ActiveRecord is the heart and soul of Rails. Understanding Object-Relational Mapping goes a long way.&lt;/p&gt;

&lt;h2 id=&quot;gems-can-be-addictive&quot;&gt;Gems can be addictive&lt;/h2&gt;
&lt;p&gt;Gems are a great part of the Ruby community; however, they should be used sparingly. Putting too many gems in an application is like filling a system with a lot of black boxes you have no control over.&lt;/p&gt;

&lt;h2 id=&quot;tdd-for-the-win&quot;&gt;TDD for the win!&lt;/h2&gt;
&lt;p&gt;I love that this tutorial emphasizes TDD. I love testing and this book rarely writes a feature without a test. I am currently working through the &lt;a href=&quot;http://pragprog.com/book/rails4/agile-web-development-with-rails-4&quot;&gt;Agile Development with Rails 4&lt;/a&gt; book and I do not like how little testing there is in that book. Hartl really knocks it out of the park here.&lt;/p&gt;

&lt;p&gt;Those are my thoughts for now. I may update this entry later. However, I don’t want to spend too much time on this. I have moved on to a different book: &lt;a href=&quot;http://pragprog.com/book/rails4/agile-web-development-with-rails-4&quot;&gt;Agile Development with Rails 4&lt;/a&gt;. This is helping me internalize many of the concepts and see different ways to work with Rails. I feel that once I am done with this book I will have the Rails expertise to start playing with a few personal projects I have in mind. These are exciting times.&lt;/p&gt;</content><author><name>Rafael Huaman</name></author><category term="Programming" /><summary type="html">So after a few months of coding on the weekend and late at night, I am finally done with the Hartl Rails tutorial. It was a great experience and I feel great about doing pretty much everything on the book. There was a lot to cover and I am not going to review it (there are plenty of reviews out there), but I am going to write about my biggest takeaways.</summary></entry><entry><title type="html">Nitrous.io and How I Stopped Carrying Two Laptops</title><link href="http://localhost:4000/nitrous-dot-io-and-how-i-stopped-carrying-two-laptops" rel="alternate" type="text/html" title="Nitrous.io and How I Stopped Carrying Two Laptops" /><published>2013-12-12T05:54:00-05:00</published><updated>2013-12-12T05:54:00-05:00</updated><id>http://localhost:4000/nitrous-dot-io-and-how-i-stopped-carrying-two-laptops</id><content type="html" xml:base="http://localhost:4000/nitrous-dot-io-and-how-i-stopped-carrying-two-laptops">&lt;p&gt;This post is bittersweet.&lt;/p&gt;

&lt;p&gt;Not too long ago I wrote about how &lt;a href=&quot;/blog/2013/10/06/my-ubuntu-laptop/&quot;&gt;I breathed new life to my old college laptop&lt;/a&gt; by turning it into my development/learning computer. When I was done, I was happy. I started using it all the time and even bringing with me when I traveled for work which meant carrying two laptops. I did not care though. My Ubuntu laptop was worth it!&lt;/p&gt;

&lt;p&gt;This lasted about two months. A few weeks ago I attended a programming workshop at Full Stack Academy. We spent a few hours working through a few exercises in JavaScript and sharing our solutions. The workshop was good and the instructors were fun; however, they showed me one thing that changed my life. They introduced me to &lt;a href=&quot;https://www.nitrous.io/&quot;&gt;nitrous.io&lt;/a&gt;. Nitrous.io is cloud based development environment with a web-based IDE and cloud VMs. What does this mean? You get a Linux box in your browser (Mind blown!). Maybe I am little late to the party but this literally changed my life. I do not carry two laptops when I travel for work anymore. I travel weekly so this is huge for me.&lt;/p&gt;

&lt;p&gt;I recently transferred all my projects to nitrous.io (this blog too!) and life has been much easier that way (Sweet!).&lt;/p&gt;

&lt;p&gt;My old laptop is still awesome but I don’t use it that much and is back to collecting dust (Bitter!).&lt;/p&gt;

&lt;p&gt;Anyway… cloud based IDEs are the &lt;strong&gt;future&lt;/strong&gt;! In fact a quick google search just confirmed that you can use the &lt;a href=&quot;http://www.raspberrypi.org/phpBB3/viewtopic.php?t=9984&quot;&gt;Raspberry Pi&lt;/a&gt; and &lt;a href=&quot;https://c9.io/&quot;&gt;Cloud9&lt;/a&gt; - another popular web based IDE - to get a development environment for $35. This is extremely exciting.&lt;/p&gt;

&lt;p&gt;That is all for now.&lt;/p&gt;</content><author><name>Rafael Huaman</name></author><category term="Programming" /><summary type="html">This post is bittersweet.</summary></entry><entry><title type="html">My First Code Retreat</title><link href="http://localhost:4000/my-first-code-retreat" rel="alternate" type="text/html" title="My First Code Retreat" /><published>2013-11-28T05:44:00-05:00</published><updated>2013-11-28T05:44:00-05:00</updated><id>http://localhost:4000/my-first-code-retreat</id><content type="html" xml:base="http://localhost:4000/my-first-code-retreat">&lt;p&gt;This is a post about my &lt;a href=&quot;http://coderetreat.org/&quot;&gt;code retreat&lt;/a&gt; experience a few months ago. For those who don’t know what a Code Retreat is please visit &lt;a href=&quot;http://coderetreat.org/&quot;&gt;coderetreat.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;This is not going be extensive. I don’t want to go into the details and the specific exercises because that would be like spoilers. I am just going to focus on the new things I learned/tried that day and my overall conclusion.&lt;/p&gt;

&lt;h2 id=&quot;pair-programming&quot;&gt;Pair Programming&lt;/h2&gt;
&lt;p&gt;To those that have never tried it, a code retreat is a great way to pair program for the first time. The first time I paired was during a job interview. When I told some people this, I got some raised eyebrows and some “Yikes! I bet that was intimidating”. It didn’t think so at the time but afterwards while analyzing my performance I concluded that my interactions were little awkward. I could have used some practice… well this retreat was just what I needed. In a single day I paired over and over again. I paired with both industry veterans and beginners and I learned a lot with each one. The best part is that everyone was always friendly and fun willing to teach and be open to criticism.&lt;/p&gt;

&lt;p&gt;I even found myself in a situation where my partner was flying through code and he got stuck and couldn’t find the problem. He didn’t quite stop though and was flying through tests and switching screens between the Ruby documentation and our program. I had to found a way to put the brakes on his speed and slowly take a few steps back to where I thought the bug was. I was abrupt but polite, all the time hoping he wouldn’t take it the wrong way. In the end he thanked me for it! It those little learning moments that make code retreats a valuable experience&lt;/p&gt;

&lt;h2 id=&quot;retrospectives&quot;&gt;Retrospectives&lt;/h2&gt;
&lt;p&gt;Actually looking back at what we did at every step of the way. This was neat; it really drove the point of Agile and refactoring home. We shouldn’t just refactor code but also try to improve ourselves and our practices.&lt;/p&gt;

&lt;h2 id=&quot;vim&quot;&gt;VIM&lt;/h2&gt;
&lt;p&gt;Most people at the retreat were fine with using Sublime and this was working fine until one of pairs said “Have you ever used VIM? You will learn today.” How can you say no to a free VIM lightning class? It was definitely a challenge at first but I got the basics down easy enough. I can see how with practice and a few neat features productivity can increase dramatically. I have not converted completely but ever since the retreat I have been practicing with vimtutor whenever I have a few free minutes. I will switch completely once I feel I am not super slow (especially now that I am using nitrous.io – more to come on this).&lt;/p&gt;

&lt;h2 id=&quot;flexing-coding-muscles&quot;&gt;Flexing coding muscles&lt;/h2&gt;
&lt;p&gt;Those exercises really make you think. The exercises are designed to teach and they are good at that. Every exercise makes you think hard and a lot and in different ways too. Simple constraints like telling you not to use a particular statement can really help you explore the limits of a programming paradigm or the features of a particular programming language. By end of the day you will be tired and you will feel great!&lt;/p&gt;

&lt;h2 id=&quot;programming-styles&quot;&gt;Programming Styles&lt;/h2&gt;
&lt;p&gt;This comes with pairing. I had seen other people’s code before at school, but they all had a style similar to mine. I guess this is expected since my classmates and I learned together.  But pairing with people who think differently is just eye-opening. Seeing different styles helped me learn new things about the Ruby programming language and showed me different ways to address problems. I had several “wow” moments when my partners suggested quick and simple solutions that I had not thought about before.&lt;/p&gt;

&lt;h2 id=&quot;fun&quot;&gt;Fun&lt;/h2&gt;
&lt;p&gt;It was all fun. What can I say? I love coding and a full day of challenges with great people was excellent.&lt;/p&gt;

&lt;h1 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h1&gt;
&lt;p&gt;I recommend it to everybody. Programmers need practice too and retreats are an excellent way to do it and discover many things in the process.&lt;/p&gt;</content><author><name>Rafael Huaman</name></author><category term="Programming" /><summary type="html">This is a post about my code retreat experience a few months ago. For those who don’t know what a Code Retreat is please visit coderetreat.org.</summary></entry><entry><title type="html">Updating My Learing Plan</title><link href="http://localhost:4000/updating-my-learing-plan" rel="alternate" type="text/html" title="Updating My Learing Plan" /><published>2013-10-13T15:05:00-04:00</published><updated>2013-10-13T15:05:00-04:00</updated><id>http://localhost:4000/updating-my-learing-plan</id><content type="html" xml:base="http://localhost:4000/updating-my-learing-plan">&lt;p&gt;When I started this learning process, I had a goal in mind and built a plan to help me achieve it. A plan can help you think methodically about how to achieve your goal and keep track of your progress. The learning plan I designed was based on what I knew at the time. Since then I have reached many milestones and have learned a lot from others. It is time now to revisit this plan and see if it is still relevant.&lt;/p&gt;

&lt;h2 id=&quot;step-one-check-progress&quot;&gt;Step one: Check Progress&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Basic programming concepts (Done - Head First Java for quick references)&lt;/li&gt;
  &lt;li&gt;The Ruby programming language
    &lt;ul&gt;
      &lt;li&gt;Basics syntax and concepts (Done - codecademy and Ruby Koans)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rails, the framework to develop web application with Ruby
    &lt;ul&gt;
      &lt;li&gt;Chapter 8 of Michael Hartl’s tutorial&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Libraries / Ruby Gems
    &lt;ul&gt;
      &lt;li&gt;Revaluated&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Rspec, Test Driven Development (TDD) or Behavior Driven Development (BDD) methodologies
    &lt;ul&gt;
      &lt;li&gt;I participated in a code retreat and had the chance to try out testing and rspec through different exercises.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;HTML and CSS, I will try HAML and Sass
    &lt;ul&gt;
      &lt;li&gt;Finished foundational HTML and CSS. I have used Sass briefly through Hartl’s tutorial&lt;/li&gt;
      &lt;li&gt;Have not tried HAML&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;JavaScript and jQuery
    &lt;ul&gt;
      &lt;li&gt;Not addressed&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Database Concepts
    &lt;ul&gt;
      &lt;li&gt;Basics Covered&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Web basics - forms, HTTP request / response
    &lt;ul&gt;
      &lt;li&gt;Covered partially by Michael Hartl’s tutorial&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;UNIX command line and development environment (Done - currently working with Ubuntu)&lt;/li&gt;
  &lt;li&gt;Deployment and Server Management
    &lt;ul&gt;
      &lt;li&gt;Heroku (Done - I use Heroku to host this blog and I am using it in Michael Hartl’s tutorial)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Git and Github, Source code version control systems
    &lt;ul&gt;
      &lt;li&gt;Basics (Done - Michael Hartl’s tutorial)&lt;/li&gt;
      &lt;li&gt;Creating a repository&lt;/li&gt;
      &lt;li&gt;Adding changes and committing them&lt;/li&gt;
      &lt;li&gt;Branching and simple merging&lt;/li&gt;
      &lt;li&gt;Pull requests (Added some simple changes to the theme I use for my blog)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Object Oriented Programming (OOP) concepts
    &lt;ul&gt;
      &lt;li&gt;Reviewed inheritance, encapsulationa, and polymorphism&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;step-two-evaluate-and-redesign-plan&quot;&gt;Step Two: Evaluate and Redesign Plan&lt;/h2&gt;

&lt;p&gt;I covered a lot of ground and I learned a lot in the process. During the past few months I have met a lot of people who have helped in one way or another. I had the chance to have short conversation with &lt;a href=&quot;https://twitter.com/blainsmith&quot;&gt;Blain Smith&lt;/a&gt; from &lt;a href=&quot;http://www.madglory.com/&quot;&gt;Mad Glory&lt;/a&gt;. He single handedly turned my plan upside down and was the main inspiration for this post. He told me about the importance of being framework agnostic and the benefits of focusing on learning the techniques of a software craftsman instead of just becoming adept with different technologies.&lt;/p&gt;

&lt;p&gt;If you look at my initial plan, I had specially focused on learning how to use different technologies: rspec, git, Ruby, Rails, etc. I had placed a lot of importance on becoming an expert with all of these technologies. What Blain helped me realize is that while knowing how to use the tools is important, learning the techniques of a Software Craftsman what really sets one apart. The techniques he was referring to are the more abstract concepts and knowledge that a good developer should have. He was referring to techniques such as design patterns, test driven development, object oriented solutions, agile methodologies, and following best programming practices in order to write good code.&lt;/p&gt;

&lt;p&gt;With this in mind I have come up with an updated version of the plan with a different set of priorities. After a little extra research I identified some resources that would help me with this revised plan.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Design Patterns and Object Oriented Design
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Design-Patterns-Ruby-Russ-Olsen/dp/0321490452&quot;&gt;Design Patterns in Ruby&lt;/a&gt;
        &lt;ul&gt;
          &lt;li&gt;This will help me learn design patterns while at the same time polishing ruby skills&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612/ref=tmm_hrd_title_0&quot;&gt;Design Patterns: Elements of Reusable Object-Oriented Software&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Writing good code
    &lt;ul&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Code-Complete-Practical-Handbook-Construction/dp/0735619670&quot;&gt;Code Complete&lt;/a&gt;&lt;/li&gt;
      &lt;li&gt;&lt;a href=&quot;http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X&quot;&gt;The Pragmatic Programmer&lt;/a&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Testing
    &lt;ul&gt;
      &lt;li&gt;Practice Test driven development through small projects and exercises.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Ruby - Next steps
  -* Metaprogramming&lt;/li&gt;
  &lt;li&gt;Techniques for Web Design
    &lt;ul&gt;
      &lt;li&gt;Practice web design concepts and techniques and learn more HTML and CSS (HAML and Sass) through it&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;So this is my new approach. Moving forward I will emphasize techniques and methodlogies instead of specific technologies. From now on the way I will learn a new language or framework is through the exploration of a new programming concept. For example, I will focus on Ruby while learning design patterns and I try Javascript when practicing web design.&lt;/p&gt;

&lt;h3 id=&quot;learning-tip&quot;&gt;Learning tip&lt;/h3&gt;

&lt;p&gt;In the past few months I found that the learning plan I created was very helpful. It will keep you on track and show your progress.
As a beginner it is very possible that your first learning plan will not be the best. This is why it’s important to keep your plan flexible and continue to reevaluate it as you learn more about the topics you are exploring.&lt;/p&gt;</content><author><name>Rafael Huaman</name></author><category term="Programming" /><summary type="html">When I started this learning process, I had a goal in mind and built a plan to help me achieve it. A plan can help you think methodically about how to achieve your goal and keep track of your progress. The learning plan I designed was based on what I knew at the time. Since then I have reached many milestones and have learned a lot from others. It is time now to revisit this plan and see if it is still relevant.</summary></entry><entry><title type="html">My Ubuntu Laptop</title><link href="http://localhost:4000/my-ubuntu-laptop" rel="alternate" type="text/html" title="My Ubuntu Laptop" /><published>2013-10-06T00:39:00-04:00</published><updated>2013-10-06T00:39:00-04:00</updated><id>http://localhost:4000/my-ubuntu-laptop</id><content type="html" xml:base="http://localhost:4000/my-ubuntu-laptop">&lt;h2 id=&quot;windows-woes&quot;&gt;Windows Woes&lt;/h2&gt;
&lt;p&gt;When I started playing with Ruby, I didn’t even have it on my laptop. With resources like &lt;a href=&quot;http://tryruby.org/&quot;&gt;tryruby.org&lt;/a&gt; and &lt;a href=&quot;http://www.codecademy.com/&quot;&gt;Codecademy&lt;/a&gt; freely available online I did not need install it until I started building small programs. After I finished the tutorials I installed Ruby on my windows machine and since I wasn’t building any complicated projects, everything was fine.&lt;/p&gt;

&lt;p&gt;Eventually I started blogging using &lt;a href=&quot;http://octopress.org/&quot;&gt;Octopress&lt;/a&gt;. That’s when I encountered my first issue. I had installed version 2.0 and Octopress requires Ruby 1.9.3. The Internet came to my rescue with &lt;a href=&quot;https://github.com/vertiginous/pik&quot;&gt;Project Pik&lt;/a&gt;. Pik is like &lt;a href=&quot;https://rvm.io/&quot;&gt;RVM&lt;/a&gt; for Windows and it allows you switch between different versions of Ruby. At first this worked well. I was able to use Octopress and deploy the first version of my blog with it. However, I ran into problems when I started &lt;a href=&quot;http://ruby.railstutorial.org/&quot;&gt;Michael Hartl’s Rails Tutorials&lt;/a&gt;. I was able to go through the initial sections but I got stuck on the advanced configuration chapters. I kept running into issues and nothing seemed to be working. Worst of all, some things would work in one version of ruby and not on the other one. I did extensive research online but nothing seemed to solve my problems completely. As soon as I finished something, a new error would show up. I was getting increasingly frustrated. Eventually I decided to skip the sections that were giving me trouble.&lt;/p&gt;

&lt;p&gt;At this point I was feeling a little defeated by these issues. I was just starting out and I had spent too much time and energy on what seemed like obscure configuration problems. It was about this time when I decided to take all the comments I had seen online about using Mac or Linux over Windows seriously. It seemed that every blog or forum I was visiting while troubleshooting had a common theme: “Use Mac or Linux, it is better”. I usually ignore the Mac vs. PC; however, this time my problems giving me a big headache and I was ready to try anything that would help me get back to learning instead of fighting hopeless configuration wars.&lt;/p&gt;

&lt;h2 id=&quot;the-flight-of-the-phoenix&quot;&gt;The Flight of the Phoenix&lt;/h2&gt;
&lt;p&gt;About a year ago my college laptop died. I turned it on one day to find the following message: “Imminent Hard Drive Failure. Backup your Data”. That was a serious message! My laptop was not messing around. I backed up my data and retired my trusty college PC. I saved it because I knew I could probably use the parts later or replace the hard drive, but I had been thinking about getting a new system and this Hard Drive failure gave me an excuse to get a new one.&lt;/p&gt;

&lt;p&gt;In the midst of my configuration issues, I found myself browsing the Apple store website and looking at the cheaper options: $999. ಠ_ಠ That was a lot more than what I was expecting. I liked the idea of having a laptop dedicated to web development but I did not like the price of Macs. At this point I remembered that I still had my old college laptop! All I needed was a new hard drive and a copy of Ubuntu and I could be using a UNIX environment which according to the Internet would solve all my problems. Finding the right parts for my laptop was a little difficult, but one cancelled order and returned hard drive later I had Ubuntu 12.04 running on my old machine!&lt;/p&gt;

&lt;h2 id=&quot;the-miracle&quot;&gt;The Miracle&lt;/h2&gt;
&lt;p&gt;Everything was just so much easier. Gems worked right out of the box without much configuration, RVM made installing Ruby a breeze, and the best part was the amount of relevant help I was able to find online. Finding answers for a Windows problem was very tedious, but answers for Linux issues were everywhere. Hooray! Not only were they everywhere but they were also clearly explained. Double Hooray! Whenever I fixed an issue on my windows laptop, the solution seemed so obscure and strange that always seemed like magic. It was the opposite with Linux. Every time I solved an issue on my Ubuntu installation I felt wiser. The online community would not only solve your problem but they would also make sure you understood what was going on and as bonus they would give you a link so that you could learn more about the subject.&lt;/p&gt;

&lt;p&gt;Needless to say, I was very happy and thrilled. I was able to go back and redo all the initial chapters of Michael Hartl’s tutorial and complete all the advanced configuration sections.&lt;/p&gt;

&lt;h2 id=&quot;my-conclusion&quot;&gt;My conclusion&lt;/h2&gt;
&lt;p&gt;Developing with Ruby on Windows is not a good idea. Use it if it’s your only option; however, trying Linux will definitely save a lot of time spent on troubleshooting.&lt;/p&gt;</content><author><name>Rafael Huaman</name></author><category term="Programming" /><summary type="html">Windows Woes When I started playing with Ruby, I didn’t even have it on my laptop. With resources like tryruby.org and Codecademy freely available online I did not need install it until I started building small programs. After I finished the tutorials I installed Ruby on my windows machine and since I wasn’t building any complicated projects, everything was fine.</summary></entry></feed>